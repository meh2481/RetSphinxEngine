EDTracker:
- Control pan with edtracker
	- X axis is left/right movement of your head (yaw)
	- Y axis is up/down movement of your head (pitch)
	- Z axis is rotational movement of your head (roll) i.e. Tilting your head to the left or right side
- Treat any 3-axis joystick as accelerometer
- Will likely need to smooth out input so screen doesn't jitter

Current higher pri:
- Look into ETC1/DXT compression for images
- Particles follow ship with acceleration applied
- Use level editor to create geometry/scenery
- Fix tamerisk board
- Test bg sfx

Bugs:
- Crashes sometimes on load
- Framerate spikes
- Particle editor breaks after F5

- Game pauses slightly when loading sound; why?
	- Has to hit pak; but already loaded
	- Loaded from memory
	- ogg format slowing it down? Need some better stream?
	- Load sfx up front?

Possible sound channels:
- BGM
- SFX
- Environmental SFX
- System SFX
- Voice
- Bg voice
- Movie

Overall TODO list:
- Look up const declarations for variables and see if that helps optimize in C
- Curve editor via ImGUI
- Resources should be streamed from disk, not loaded upfront from .pak files
- Sound filters
- Sound pitch
- Fix math for softbody lattice anim so it actually works properly
- Use GLM for math stuff instead of glPushMatrix() and friends
- Implement newer OpenGL shaders
- Use shaders rather than lattice animations where possible
- rip out displaylists for 3D objects and use vertex buffers instead
- Revisit class predeclaration and add more where possible
- Ortho for HUD and text drawing
- Create allocator / choose one to use rather than mixing malloc & new
- Particle systems, objects, etc should be loaded by template, not from XML each time
- Move object self-creation into resource loaders where applicable
- Error checking of parameters in luafuncs.cpp (without breaking everything this time)

Particle System Editing:
- Fix image rect preview
- UI should save/load window booleans as config
- Re - add death spawn types (tho prolly on a per-system basis?)
- Add particle support for emitter acceleration
- Fix other TODO items in particle UI and saving
- Add support for seeing particle death spawns
- Add rotation angle for setting rotation based on velocity (so you don't have to image edit for a particle problem)


Refactoring thoughts:
- Image class is bloated with too much junk; once shaders are implemented see what can be cropped out
- lots of classes are in files for other classes; move to own files


Lower priority:
- Test sound Pitch shifting; current implementation seems to not work for all sound effects as intended
- "Press Any Key" in games is used to determine which controller to use (though this should be stored, which most games don't do)
- UTF code point lookup should use array of direct values rather than binary search?
- Use SDL_GetPowerInfo() for laptop battery reminders
- Disable exceptions/rtti?
- Decide if map loading is engine-specific or game-specific
- Move all resource loading stuff to IO?


Reasoning behind the engine design (aka why not just use Unity or whatever):
- Robust Lua scripting interface
- 3D either fleshed out more fully (with sub-objects, object demolition) or ripped out
	-- Don't want to bother with bones/3D animation; math too complicated. Does this make the 3D too limited?
	-- How much do I care about 3D eye candy and does that just make the 2D stuff look like crap?
- Simplified resource managment
	-- Paged in with memory mapping if intelligent enough for performance gains
- XML vs. Lua - when to use one over the other? Can XML be removed intelligently?
- Optimization and data-driven programming/design where applicable



Other misc unordered TODO:
- Scene editor / XML exporter
- Intelligently split things into subclasses







OPENGL STUFF

- glNamedBufferStorageEXT()
https://www.opengl.org/wiki/Nomenclature/Direct_State_Access
https://dl.dropboxusercontent.com/u/22111385/crap/renderer.cpp
- glUniformX() functions for sending stuff to shaders
- Load from pakfile only if actual file doesn't exist
https://dl.dropboxusercontent.com/u/22111385/crap/correlation_lines.vert
https://dl.dropboxusercontent.com/u/22111385/crap/correlation_lines.frag
https://dl.dropboxusercontent.com/u/22111385/crap/gpubase.7z







SafeShaderVar sv[] =
{
{ "proj", as_uniform(proj) },
{ "tex", as_uniform(textureUnit) },
{ "rayExitTex", as_uniform(textureUnitBack) },
{ "samplingDist", as_uniform(vrp.samplingDist) },
{ "stepValue", as_uniform(vrp.stepValue) },
{ "deformTex", as_uniform(textureUnitDeform) },
{ "intensity", as_uniform(vrp.intensity) },
{ "alphaMult", as_uniform(vrp.alphaMult) },
{ "colorTex", as_uniform(textureUnitColor) },
{ "deformMult", as_uniform(vrp.deformMult) },
};

shader->setUniforms(sv);












notes from talk with fg:
- if GL 4.5 if(glDebugMessageCallback) - GL_DEBUG_OUTPUT_SYNCHRONOUS
	-- set core profile SDL_GL_CONTEXT_PROFILE_CORE
	-- gontext)forward_compatible_flag | sdl_gl_context debug_flag
	--SDL_GL_SHARE_WITH_CURRENT_CONTEXT
	
-GLM for math
	- mat4 for transformations
	v' = mat4 * (x,y,z,0) --> transform vector
	v' = mat4 * (x,y,z,1) --> transforms point (translate)
	m = scale * translate * rot --> rotate first, then translate, then scale
	projmat = cameramat * objmat (can be recursive by passing proj to child objects)
	
Endianness testing:
	union { char c[2], short s; } u; u.s = 1; return u.c[0];
	
	
Note: On Linux, "xboxdrv" is the driver I had the most success with when it came to gamepad rumble (default driver said it rumbled, but didn't)