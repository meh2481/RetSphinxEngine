Current higher pri:
- Timestamp-based asset rebuilding; only rebuild changed assets, repack everything else around it
	- Memset to 0 (for compression?) or PADPADPADPAD before filling things out, rather than manually entering pad bytes?
- Assets in pak files according to levels/chunks; all assets in one chunk are loaded at once
	- Automatically walk dependency chain to get used assets per chunk / manually specify?
	- Need some way of building out levels/chunks automatically, or more easy way to do it manually
- Better organize Lua classes; nodes/objects should be in subfolders rather than prefixed
- Better handling of raw vs. DXT images
- Compressor should be multithreaded
- Think about tree structure for asset dependencies, pros/cons
- Refactor data compressor into something more extensible; map file extensions to classes or something
- Remove OpenGL deprecated things and re-enable forward compat flag
	GL[37190]: glVertexPointer has been removed from OpenGL Core context (GL_INVALID_OPERATION)
	GL[37190]: glTexCoordPointer has been removed from OpenGL Core context (GL_INVALID_OPERATION)
	GL[37190]: Using glDrawArrays in a Core context with parameter <mode> and enum '0x7' which was removed from Core OpenGL (GL_INVALID_ENUM)
	GL[37190]: glEnableClientState has been removed from OpenGL Core context (GL_INVALID_OPERATION)
	GL[37190]: glColorPointer has been removed from OpenGL Core context (GL_INVALID_OPERATION)
	GL[37190]: glDisableClientState has been removed from OpenGL Core context (GL_INVALID_OPERATION)
- Small-block memory allocator for Lua
	- Other memory allocators/uses?

- Particles follow ship with acceleration applied
- Use level editor to create geometry/scenery
- Fix tamerisk board
- Test bg sfx

Bugs:
- Slowing down via key doesn't seem to change lua dt; particles/lua are affected by framerate
	- Test at 144Hz and see what breaks
- Ship stops suddenly when moving joystick slowly towards center position
- Particle editor breaks after F5
- Fix objsegment partial tiling? Or do I not care?

- Game pauses slightly when loading sound; why?
	- Has to hit pak; but already loaded
	- Loaded from memory
	- ogg format slowing it down? Need some better stream?
	- Load sfx up front?

Possible sound channels:
- BGM
- SFX
- Environmental SFX
- System SFX
- Voice
- Bg voice
- Movie

Overall TODO list:
- Look up const declarations for variables and see if that helps optimize in C
- Curve editor via ImGUI
- Resources should be streamed from disk, not loaded upfront from .pak files
- Sound filters
- Sound pitch
- Fix math for softbody lattice anim so it actually works properly
- Use shaders rather than lattice animations where possible
- Revisit class predeclaration and add more where possible
- Ortho for HUD and text drawing
- Create allocator / choose one to use rather than mixing malloc & new
- Particle systems, objects, etc should be loaded by template, not from XML each time
	- Also XML->PAK binary formats to simplify this
- Move object self-creation into resource loaders where applicable
- Error checking of parameters in luafuncs.cpp (without breaking everything this time)

Particle System Editing:
- UI should save/load window booleans as config
- Re-add death spawn types (tho prolly on a per-system basis?)
- Add particle support for emitter acceleration
- Add support for seeing particle death spawns
- Add rotation angle for setting rotation based on velocity (so you don't have to image edit for a particle problem)


Refactoring thoughts:
- lots of classes are in files for other classes; move to own files


Lower priority:
- Test sound pitch shifting; current implementation seems to not work for all sound effects as intended
- "Press Any Key" in games is used to determine which controller to use (though this should be stored, which most games don't do)
- UTF code point lookup should use array of direct values rather than binary search? Or hashmap of some sort?
- Use SDL_GetPowerInfo() for laptop battery reminders
- Move all resource loading stuff to IO?
- Stream areas as needed vs. load maps?

Reasoning behind the engine design (aka why not just use Unity or whatever):
- Robust Lua scripting interface
- 3D either fleshed out more fully (with sub-objects, object demolition) or ripped out
	-- Don't want to bother with bones/3D animation; math too complicated. Does this make the 3D too limited?
	-- How much do I care about 3D eye candy and does that just make the 2D stuff look like crap?
- Simplified resource managment
	-- Paged in with memory mapping if intelligent enough for performance gains
- XML vs. Lua - when to use one over the other? Can XML be removed intelligently?
- Optimization and data-driven programming/design where applicable
- I had a look at Unity; it sucks all the joy out of game development
	- Low-level code (the fun part) is replaced with high-level APIs to learn. Learning APIs is not fun, and never will be.
	- Actual learning as a whole is removed; you won't learn anything practical from learning Unity
	- No programming experience is required in Unity; any old artist can throw something together that will look better. Lack of art skill will become the major limiting factor.
	- Unity uses C#. C# is a terrible language made by novices, for novices
	- The "portability" aspect is thrown out the window when optimization is difficult. New Unity projects can't be ported to Vita. Old ones could, but were incredibly impossible to optimize (because C#). In essence, using a "more portable" platform prevents actual portability, and optimizing per-system is nigh on impossible. A render method that's fast on one system may be impossibly slow on another, and Unity can't take this into account as well as a well-designed, lower-level engine can (because C#).


Other misc unordered TODO:
- Scene editor / XML exporter
- Intelligently split things into subclasses



OPENGL STUFF

- glNamedBufferStorageEXT()
https://www.opengl.org/wiki/Nomenclature/Direct_State_Access
https://dl.dropboxusercontent.com/u/22111385/crap/renderer.cpp
- glUniformX() functions for sending stuff to shaders
- Load from pakfile only if actual file doesn't exist?
	- Better to remove file loading entirely and ONLY load from pakfile
https://dl.dropboxusercontent.com/u/22111385/crap/correlation_lines.vert
https://dl.dropboxusercontent.com/u/22111385/crap/correlation_lines.frag
https://dl.dropboxusercontent.com/u/22111385/crap/gpubase.7z







SafeShaderVar sv[] =
{
{ "proj", as_uniform(proj) },
{ "tex", as_uniform(textureUnit) },
{ "rayExitTex", as_uniform(textureUnitBack) },
{ "samplingDist", as_uniform(vrp.samplingDist) },
{ "stepValue", as_uniform(vrp.stepValue) },
{ "deformTex", as_uniform(textureUnitDeform) },
{ "intensity", as_uniform(vrp.intensity) },
{ "alphaMult", as_uniform(vrp.alphaMult) },
{ "colorTex", as_uniform(textureUnitColor) },
{ "deformMult", as_uniform(vrp.deformMult) },
};

shader->setUniforms(sv);












notes from talk with fg:
- if GL 4.5 if(glDebugMessageCallback) - GL_DEBUG_OUTPUT_SYNCHRONOUS
	-- set core profile SDL_GL_CONTEXT_PROFILE_CORE
	-- gontext)forward_compatible_flag | sdl_gl_context debug_flag
- "push lines ino std::vector, then do glBufferData and draw that buffer as lines"
	
-GLM for math
	- mat4 for transformations
	v' = mat4 * (x,y,z,0) --> transform vector
	v' = mat4 * (x,y,z,1) --> transforms point (translate)
	m = scale * translate * rot --> rotate first, then translate, then scale
	projmat = cameramat * objmat (can be recursive by passing proj to child objects)
	
Endianness testing:
	union { char c[2], short s; } u; u.s = 1; return u.c[0];
	
	
Note: On Linux, "xboxdrv" is the driver I had the most success with when it came to gamepad rumble (default driver said it rumbled, but didn't)